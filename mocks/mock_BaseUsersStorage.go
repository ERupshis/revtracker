// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erupshis/revtracker/internal/auth/users/storage (interfaces: BaseUsersStorage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	data "github.com/erupshis/revtracker/internal/auth/data"
	gomock "github.com/golang/mock/gomock"
)

// MockBaseUsersStorage is a mock of BaseUsersStorage interface.
type MockBaseUsersStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBaseUsersStorageMockRecorder
}

// MockBaseUsersStorageMockRecorder is the mock recorder for MockBaseUsersStorage.
type MockBaseUsersStorageMockRecorder struct {
	mock *MockBaseUsersStorage
}

// NewMockBaseUsersStorage creates a new mock instance.
func NewMockBaseUsersStorage(ctrl *gomock.Controller) *MockBaseUsersStorage {
	mock := &MockBaseUsersStorage{ctrl: ctrl}
	mock.recorder = &MockBaseUsersStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseUsersStorage) EXPECT() *MockBaseUsersStorageMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockBaseUsersStorage) AddUser(arg0 context.Context, arg1 *data.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockBaseUsersStorageMockRecorder) AddUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockBaseUsersStorage)(nil).AddUser), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockBaseUsersStorage) GetUser(arg0 context.Context, arg1 string) (*data.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*data.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockBaseUsersStorageMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockBaseUsersStorage)(nil).GetUser), arg0, arg1)
}

// GetUserID mocks base method.
func (m *MockBaseUsersStorage) GetUserID(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockBaseUsersStorageMockRecorder) GetUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockBaseUsersStorage)(nil).GetUserID), arg0, arg1)
}

// GetUserRole mocks base method.
func (m *MockBaseUsersStorage) GetUserRole(arg0 context.Context, arg1 int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRole", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRole indicates an expected call of GetUserRole.
func (mr *MockBaseUsersStorageMockRecorder) GetUserRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRole", reflect.TypeOf((*MockBaseUsersStorage)(nil).GetUserRole), arg0, arg1)
}
