// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erupshis/revtracker/internal/auth/users/storage (interfaces: BaseUsersStorage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	data "github.com/erupshis/revtracker/internal/auth/data"
	gomock "github.com/golang/mock/gomock"
)

// MockBaseUsersStorage is a mock of BaseUsersStorage interface.
type MockBaseUsersStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBaseUsersStorageMockRecorder
}

// MockBaseUsersStorageMockRecorder is the mock recorder for MockBaseUsersStorage.
type MockBaseUsersStorageMockRecorder struct {
	mock *MockBaseUsersStorage
}

// NewMockBaseUsersStorage creates a new mock instance.
func NewMockBaseUsersStorage(ctrl *gomock.Controller) *MockBaseUsersStorage {
	mock := &MockBaseUsersStorage{ctrl: ctrl}
	mock.recorder = &MockBaseUsersStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseUsersStorage) EXPECT() *MockBaseUsersStorageMockRecorder {
	return m.recorder
}

// DeleteUserByID mocks base method.
func (m *MockBaseUsersStorage) DeleteUserByID(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByID indicates an expected call of DeleteUserByID.
func (mr *MockBaseUsersStorageMockRecorder) DeleteUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByID", reflect.TypeOf((*MockBaseUsersStorage)(nil).DeleteUserByID), arg0, arg1)
}

// InsertUser mocks base method.
func (m *MockBaseUsersStorage) InsertUser(arg0 context.Context, arg1 *data.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockBaseUsersStorageMockRecorder) InsertUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockBaseUsersStorage)(nil).InsertUser), arg0, arg1)
}

// SelectUserByID mocks base method.
func (m *MockBaseUsersStorage) SelectUserByID(arg0 context.Context, arg1 int64) (*data.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserByID", arg0, arg1)
	ret0, _ := ret[0].(*data.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserByID indicates an expected call of SelectUserByID.
func (mr *MockBaseUsersStorageMockRecorder) SelectUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserByID", reflect.TypeOf((*MockBaseUsersStorage)(nil).SelectUserByID), arg0, arg1)
}

// SelectUserByLogin mocks base method.
func (m *MockBaseUsersStorage) SelectUserByLogin(arg0 context.Context, arg1 string) (*data.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserByLogin", arg0, arg1)
	ret0, _ := ret[0].(*data.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserByLogin indicates an expected call of SelectUserByLogin.
func (mr *MockBaseUsersStorageMockRecorder) SelectUserByLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserByLogin", reflect.TypeOf((*MockBaseUsersStorage)(nil).SelectUserByLogin), arg0, arg1)
}

// SelectUserByLoginOrName mocks base method.
func (m *MockBaseUsersStorage) SelectUserByLoginOrName(arg0 context.Context, arg1, arg2 string) (*data.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserByLoginOrName", arg0, arg1, arg2)
	ret0, _ := ret[0].(*data.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserByLoginOrName indicates an expected call of SelectUserByLoginOrName.
func (mr *MockBaseUsersStorageMockRecorder) SelectUserByLoginOrName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserByLoginOrName", reflect.TypeOf((*MockBaseUsersStorage)(nil).SelectUserByLoginOrName), arg0, arg1, arg2)
}

// UpdateUser mocks base method.
func (m *MockBaseUsersStorage) UpdateUser(arg0 context.Context, arg1 *data.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockBaseUsersStorageMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockBaseUsersStorage)(nil).UpdateUser), arg0, arg1)
}
