// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package data

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type userTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *userTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("users").
func (v *userTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *userTableType) Columns() []string {
	return []string{
		"id",
		"name",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *userTableType) NewStruct() reform.Struct {
	return new(User)
}

// NewRecord makes a new record for that table.
func (v *userTableType) NewRecord() reform.Record {
	return new(User)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *userTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// UserTable represents users view or table in SQL database.
var UserTable = &userTableType{
	s: parse.StructInfo{
		Type:    "User",
		SQLName: "users",
		Fields: []parse.FieldInfo{
			{Name: "ID", Type: "int64", Column: "id"},
			{Name: "Name", Type: "string", Column: "name"},
		},
		PKFieldIndex: 0,
	},
	z: new(User).Values(),
}

// String returns a string representation of this struct or record.
func (s User) String() string {
	res := make([]string, 2)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Name: " + reform.Inspect(s.Name, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *User) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Name,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *User) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Name,
	}
}

// View returns View object for that struct.
func (s *User) View() reform.View {
	return UserTable
}

// Table returns Table object for that record.
func (s *User) Table() reform.Table {
	return UserTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *User) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *User) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *User) HasPK() bool {
	return s.ID != UserTable.z[UserTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.ID = pk.
func (s *User) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = UserTable
	_ reform.Struct = (*User)(nil)
	_ reform.Table  = UserTable
	_ reform.Record = (*User)(nil)
	_ fmt.Stringer  = (*User)(nil)
)

type homeworkTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *homeworkTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("homeworks").
func (v *homeworkTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *homeworkTableType) Columns() []string {
	return []string{
		"id",
		"name",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *homeworkTableType) NewStruct() reform.Struct {
	return new(Homework)
}

// NewRecord makes a new record for that table.
func (v *homeworkTableType) NewRecord() reform.Record {
	return new(Homework)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *homeworkTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// HomeworkTable represents homeworks view or table in SQL database.
var HomeworkTable = &homeworkTableType{
	s: parse.StructInfo{
		Type:    "Homework",
		SQLName: "homeworks",
		Fields: []parse.FieldInfo{
			{Name: "ID", Type: "int64", Column: "id"},
			{Name: "Name", Type: "string", Column: "name"},
		},
		PKFieldIndex: 0,
	},
	z: new(Homework).Values(),
}

// String returns a string representation of this struct or record.
func (s Homework) String() string {
	res := make([]string, 2)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Name: " + reform.Inspect(s.Name, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Homework) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Name,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Homework) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Name,
	}
}

// View returns View object for that struct.
func (s *Homework) View() reform.View {
	return HomeworkTable
}

// Table returns Table object for that record.
func (s *Homework) Table() reform.Table {
	return HomeworkTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Homework) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Homework) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Homework) HasPK() bool {
	return s.ID != HomeworkTable.z[HomeworkTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.ID = pk.
func (s *Homework) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = HomeworkTable
	_ reform.Struct = (*Homework)(nil)
	_ reform.Table  = HomeworkTable
	_ reform.Record = (*Homework)(nil)
	_ fmt.Stringer  = (*Homework)(nil)
)

type contentTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *contentTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("contents").
func (v *contentTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *contentTableType) Columns() []string {
	return []string{
		"id",
		"task",
		"answer",
		"solution",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *contentTableType) NewStruct() reform.Struct {
	return new(Content)
}

// NewRecord makes a new record for that table.
func (v *contentTableType) NewRecord() reform.Record {
	return new(Content)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *contentTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// ContentTable represents contents view or table in SQL database.
var ContentTable = &contentTableType{
	s: parse.StructInfo{
		Type:    "Content",
		SQLName: "contents",
		Fields: []parse.FieldInfo{
			{Name: "ID", Type: "int64", Column: "id"},
			{Name: "Task", Type: "*string", Column: "task"},
			{Name: "Answer", Type: "*string", Column: "answer"},
			{Name: "Solution", Type: "*string", Column: "solution"},
		},
		PKFieldIndex: 0,
	},
	z: new(Content).Values(),
}

// String returns a string representation of this struct or record.
func (s Content) String() string {
	res := make([]string, 4)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Task: " + reform.Inspect(s.Task, true)
	res[2] = "Answer: " + reform.Inspect(s.Answer, true)
	res[3] = "Solution: " + reform.Inspect(s.Solution, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Content) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Task,
		s.Answer,
		s.Solution,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Content) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Task,
		&s.Answer,
		&s.Solution,
	}
}

// View returns View object for that struct.
func (s *Content) View() reform.View {
	return ContentTable
}

// Table returns Table object for that record.
func (s *Content) Table() reform.Table {
	return ContentTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Content) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Content) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Content) HasPK() bool {
	return s.ID != ContentTable.z[ContentTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.ID = pk.
func (s *Content) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = ContentTable
	_ reform.Struct = (*Content)(nil)
	_ reform.Table  = ContentTable
	_ reform.Record = (*Content)(nil)
	_ fmt.Stringer  = (*Content)(nil)
)

type questionTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *questionTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("questions").
func (v *questionTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *questionTableType) Columns() []string {
	return []string{
		"id",
		"name",
		"content_id",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *questionTableType) NewStruct() reform.Struct {
	return new(Question)
}

// NewRecord makes a new record for that table.
func (v *questionTableType) NewRecord() reform.Record {
	return new(Question)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *questionTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// QuestionTable represents questions view or table in SQL database.
var QuestionTable = &questionTableType{
	s: parse.StructInfo{
		Type:    "Question",
		SQLName: "questions",
		Fields: []parse.FieldInfo{
			{Name: "ID", Type: "int64", Column: "id"},
			{Name: "Name", Type: "string", Column: "name"},
			{Name: "ContentID", Type: "int64", Column: "content_id"},
		},
		PKFieldIndex: 0,
	},
	z: new(Question).Values(),
}

// String returns a string representation of this struct or record.
func (s Question) String() string {
	res := make([]string, 3)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Name: " + reform.Inspect(s.Name, true)
	res[2] = "ContentID: " + reform.Inspect(s.ContentID, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Question) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Name,
		s.ContentID,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Question) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Name,
		&s.ContentID,
	}
}

// View returns View object for that struct.
func (s *Question) View() reform.View {
	return QuestionTable
}

// Table returns Table object for that record.
func (s *Question) Table() reform.Table {
	return QuestionTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Question) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Question) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Question) HasPK() bool {
	return s.ID != QuestionTable.z[QuestionTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.ID = pk.
func (s *Question) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = QuestionTable
	_ reform.Struct = (*Question)(nil)
	_ reform.Table  = QuestionTable
	_ reform.Record = (*Question)(nil)
	_ fmt.Stringer  = (*Question)(nil)
)

type homeworkQuestionTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *homeworkQuestionTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("homework_questions").
func (v *homeworkQuestionTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *homeworkQuestionTableType) Columns() []string {
	return []string{
		"id",
		"homework_id",
		"question_id",
		"order",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *homeworkQuestionTableType) NewStruct() reform.Struct {
	return new(HomeworkQuestion)
}

// NewRecord makes a new record for that table.
func (v *homeworkQuestionTableType) NewRecord() reform.Record {
	return new(HomeworkQuestion)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *homeworkQuestionTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// HomeworkQuestionTable represents homework_questions view or table in SQL database.
var HomeworkQuestionTable = &homeworkQuestionTableType{
	s: parse.StructInfo{
		Type:    "HomeworkQuestion",
		SQLName: "homework_questions",
		Fields: []parse.FieldInfo{
			{Name: "ID", Type: "int64", Column: "id"},
			{Name: "HomeworkID", Type: "int64", Column: "homework_id"},
			{Name: "QuestionID", Type: "int64", Column: "question_id"},
			{Name: "Order", Type: "int64", Column: "order"},
		},
		PKFieldIndex: 0,
	},
	z: new(HomeworkQuestion).Values(),
}

// String returns a string representation of this struct or record.
func (s HomeworkQuestion) String() string {
	res := make([]string, 4)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "HomeworkID: " + reform.Inspect(s.HomeworkID, true)
	res[2] = "QuestionID: " + reform.Inspect(s.QuestionID, true)
	res[3] = "Order: " + reform.Inspect(s.Order, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *HomeworkQuestion) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.HomeworkID,
		s.QuestionID,
		s.Order,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *HomeworkQuestion) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.HomeworkID,
		&s.QuestionID,
		&s.Order,
	}
}

// View returns View object for that struct.
func (s *HomeworkQuestion) View() reform.View {
	return HomeworkQuestionTable
}

// Table returns Table object for that record.
func (s *HomeworkQuestion) Table() reform.Table {
	return HomeworkQuestionTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *HomeworkQuestion) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *HomeworkQuestion) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *HomeworkQuestion) HasPK() bool {
	return s.ID != HomeworkQuestionTable.z[HomeworkQuestionTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.ID = pk.
func (s *HomeworkQuestion) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = HomeworkQuestionTable
	_ reform.Struct = (*HomeworkQuestion)(nil)
	_ reform.Table  = HomeworkQuestionTable
	_ reform.Record = (*HomeworkQuestion)(nil)
	_ fmt.Stringer  = (*HomeworkQuestion)(nil)
)

func init() {
	parse.AssertUpToDate(&UserTable.s, new(User))
	parse.AssertUpToDate(&HomeworkTable.s, new(Homework))
	parse.AssertUpToDate(&ContentTable.s, new(Content))
	parse.AssertUpToDate(&QuestionTable.s, new(Question))
	parse.AssertUpToDate(&HomeworkQuestionTable.s, new(HomeworkQuestion))
}
